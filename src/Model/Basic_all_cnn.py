# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14iOhAm03ScMzgugYVaYyTHwe3xi380b9
"""

# Commented out IPython magic to ensure Python compatibility.
import torch
import torch.nn as nn
import torch.optim as optim
import torch.nn.functional as F
import torch.backends.cudnn as cudnn

import torchvision
import torchvision.transforms as transforms

import os
import argparse


device = 'cuda' if torch.cuda.is_available() else 'cpu'
best_acc = 0  # best test accuracy
start_epoch = 0  # start from epoch 0 or last checkpoint epoch

# Data
print('==> Preparing data..')
transform_train = transforms.Compose([
    transforms.RandomCrop(32, padding=4),
    transforms.RandomHorizontalFlip(),
    transforms.ToTensor(),
    transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010)),
])

transform_test = transforms.Compose([
    transforms.ToTensor(),
    transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010)),
])

trainset = torchvision.datasets.CIFAR10(
    root='./data', train=True, download=True, transform=transform_train)
trainloader = torch.utils.data.DataLoader(
    trainset, batch_size=128, shuffle=True, num_workers=2)

testset = torchvision.datasets.CIFAR10(
    root='./data', train=False, download=True, transform=transform_test)
testloader = torch.utils.data.DataLoader(
    testset, batch_size=100, shuffle=False, num_workers=2)

classes = ('plane', 'car', 'bird', 'cat', 'deer',
           'dog', 'frog', 'horse', 'ship', 'truck')

import torch.nn as nn
import torch.nn.functional as F


class Net(nn.Module):
    def __init__(self,device, num_classes=10,optimizer = "adam", lr=0.003, weight_decay = 0.01, criterion = "CrossEntropyLoss",momentum="momentum"):
      super(Net, self).__init__()
      
      self.num_classes = num_classes
      self.device = device

      #Convolutional Layers:
      #Block1
      self.conv1 = nn.Conv2d(in_channels=3, out_channels=96, kernel_size=(3, 3), padding='same')
      self.conv2 = nn.Conv2d(in_channels=96, out_channels=96, kernel_size=(3, 3), padding='same')
      #BLock2
      self.conv3 = nn.Conv2d(in_channels=96, out_channels=192, kernel_size=(3, 3), padding='same')
      self.conv4 = nn.Conv2d(in_channels=192, out_channels=192, kernel_size=(3, 3), padding='same')
      #Block3
      self.conv5 = nn.Conv2d(in_channels=192, out_channels=192, kernel_size=(3, 3), padding='same')
      #Block4
      self.conv6 = nn.Conv2d(in_channels=192, out_channels=192, kernel_size=(1, 1), padding='valid')
      #Block5
      self.conv7 = nn.Conv2d(in_channels=192, out_channels=self.num_classes, kernel_size=(1, 1), padding='valid')

      #MaxPool Layers
      #Block1
      self.max1 = nn.Conv2d(in_channels=96, out_channels=96, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      #Block2
      self.max2 = nn.Conv2d(in_channels=192, out_channels=192, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))

      #GlobalAveragePooling
      #Useful Reference: https://discuss.pytorch.org/t/global-average-pooling-in-pytorch/6721/12
      self.gap = nn.AvgPool2d(kernel_size=(6, 6))

      #hyper parameters :

      if optimizer == "adam":
        self.optimizer = optim.Adam(self.parameters(), lr=lr, weight_decay=weight_decay)
      else:
        print("Optimizer not recognized")

      if criterion == "CrossEntropyLoss":
        self.criterion = nn.CrossEntropyLoss()    
      else:
        print("Loss criterion not recognized")

    def forward(self, x):
        #Block1
      x = F.relu(self.conv1(x))
      x = F.relu(self.conv2(x))
      x = self.max1(x)
      #Block2
      x = F.relu(self.conv3(x))
      x = F.relu(self.conv4(x))
      x = self.max2(x)
      #Block3
      x = F.relu(self.conv5(x))
      #Block4
      x = F.relu(self.conv6(x))
      #Block5
      x = F.relu(self.conv7(x))
      #GlobalAveragePool
      x = self.gap(x)
      x = x.flatten(start_dim=1)
      return x




net = Net(device, num_classes=10,optimizer = "adam", lr=0.003, weight_decay = 0.01, criterion = "CrossEntropyLoss",momentum="momentum")
net = net.to(device)
if device == 'cuda':
    net = torch.nn.DataParallel(net)
    cudnn.benchmark = True

criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(net.parameters(), lr=0.003, weight_decay=0.01)
#scheduler = torch.optim.lr_scheduler.CosineAnnealingLR(optimizer, T_max=200)


# Training
def train(epoch):
    print('\nEpoch: %d' % epoch)
    net.train()
    train_loss = 0
    correct = 0
    total = 0
    for batch_idx, (inputs, targets) in enumerate(trainloader):
        inputs, targets = inputs.to(device), targets.to(device)
        optimizer.zero_grad()
        outputs = net(inputs)
        loss = criterion(outputs, targets)
        loss.backward()
        optimizer.step()

        train_loss += loss.item()
        _, predicted = outputs.max(1)
        total += targets.size(0)
        correct += predicted.eq(targets).sum().item()
        print(batch_idx, len(trainloader), 'Loss: %.3f | Acc: %.3f%% (%d/%d)'
#                      % (train_loss/(batch_idx+1), 100.*correct/total, correct, total))


def test(epoch):
    global best_acc
    net.eval()
    test_loss = 0
    correct = 0
    total = 0
    with torch.no_grad():
        for batch_idx, (inputs, targets) in enumerate(testloader):
            inputs, targets = inputs.to(device), targets.to(device)
            outputs = net(inputs)
            loss = criterion(outputs, targets)

            test_loss += loss.item()
            _, predicted = outputs.max(1)
            total += targets.size(0)
            correct += predicted.eq(targets).sum().item()
            print(batch_idx, len(testloader), 'Loss: %.3f | Acc: %.3f%% (%d/%d)'
#                          % (test_loss/(batch_idx+1), 100.*correct/total, correct, total))

    # Save checkpoint.
    acc = 100.*correct/total


for epoch in range(start_epoch, start_epoch+200):
    train(epoch)
    test(epoch)
    #scheduler.step()



